(function () {
    "use strict"; function n(n, t) {
        n.user = {}; n.saveRegister = function () {
            n.registartionValidatorapi.valid() && t.IsExitsUser(n.user.UserName).then(function (i) {
                n.isExits = i.data; n.isExits == !0 ? t.AddUserDetails(n.user).then(function (t)
                { var i, r; n.userStatus = t.data; n.userStatus == !0 && (i = n.user.UserName, i = i.replace("@", "-"), i = i.replace(".", "!"), r = "/Home/RegistraionSuccessfull/" + i, window.location = r) }) : sweetAlert("Oops...", "Sorry, that username already exists!", "error")
            })
        };
        n.resetRegister = function ()
        { n.user = {}; $(".help-block").html(""); $(".help-block").parent("div").removeClass("has-error") };

        n.RegistartionDataValidator =
            { rules: { UserNameReg: { required: !0, email: !0 }, PasswordReg: { required: !0 }, ConfirmPassword: { required: !0, equalTo: "#PasswordReg" }, FirstName: { required: !0 }, LastName: { required: !0 }, CompanyName: { required: !0 }, CompanyPosition: { required: !0 }, Address1: { required: !0 }, CountryID: { required: !0 }, StateID: { required: !0 }, City: { required: !0 }, Zipcode: { required: !0 }, PhoneNo: { required: !0, maxlength: 15 } }, messages: { UserNameReg: { required: "Please Provide User Name", email: "Enter Proper Email Address" }, PasswordReg: { required: "Please Provide Password" }, ConfirmPassword: { required: "Please Provide Confirm Password", equalTo: "Password Not Match" }, FirstName: { required: "Please Provide FirstName" }, LastName: { required: "Please Provide LastName" }, CompanyName: { required: "Please Provide Company Name" }, CompanyPosition: { required: "Please Provide Company Position" }, Address1: { required: "Please Provide Address1" }, CountryID: { required: "Please Select Country " }, StateID: { required: "Please Select State" }, City: { required: "Please Provide CityName" }, Zipcode: { required: "Please Provide Zipcode" }, PhoneNo: { required: "Please Provide PhoneNo", maxlength: "Please Enter Valid PhoneNo" } } }; n.country = {}; n.getCountryList = function () { t.getAllCountryList().then(function (t) { n.countrys = t.data }) }; n.getCountryList(); n.statedata = {}; n.getStateList = function (i) { t.GetallStateByCountryId(i).then(function (t) { n.statedata = t.data }) }
    } function t(n, t) {
        n.userdata = {};
        n.forgotPassword = function (i) {
            n.forgotPasswordValidatorapi.valid() && t.ForgotPassword(i.ForgotPassword).then(function (t) { n.userdata = t.data; n.userdata != null ? n.userdata == !0 ? swal("Thank you!", "Please check your email for instructions on how to set your new password!", "success") : swal("Invalid username.") : swal("Could not login due to some internal error") })
        }; n.ForgotPasswordValidator = { rules: { UserNameForgot: { required: !0, email: !0 } }, messages: { UserNameForgot: { required: "Please Provide Registered Email ID", email: "Enter Proper Email Address" } } }
    } function i(n, t) { function r(n) { for (var u = window.location.search.substring(1), r = u.split("&"), i, t = 0; t < r.length; t++) if (i = r[t].split("="), i[0] == n) return i[1] } var i = r("Req"); n.userReset = {}; t.Reset(i).then(function (t) { n.userReset = t.data; n.userReset != null && (n.userReset == 2 ? $("#submit").show() : (n.userReset == 1 && ($("#errormesage").text("The request was aleady completed. To reset your password, type in your email address again by clicking in Login > forgot password link."), $("#ResetPassword").attr("readonly", "readonly"), $("#ResetConfirmPassword").attr("readonly", "readonly"), $("#submit").hide()), n.userReset == 3 && ($("#errormesage").text("Can't process your request."), $("#ResetPassword").attr("readonly", "readonly"), $("#ResetConfirmPassword").attr("readonly", "readonly"), $("#submit").hide()))) }); n.userpassword = {}; n.resetPassword = function (r) { n.resetPasswordValidatorapi.valid() && t.ResetPassword(i, r.Password).then(function (t) { n.userpassword = t.data; n.userpassword != null && n.userpassword == !0 && (swal("Thank you!", "Your password has been successfully updated.", "success"), window.location.href = "/Home/Index") }) }; n.ResetPasswordValidator = { rules: { ResetPassword: { required: !0 }, ResetConfirmPassword: { required: !0, equalTo: "#ResetPassword" } }, messages: { ResetPassword: { required: "Please Provide Password" }, ResetConfirmPassword: { required: "Please Provide Confirm Password", equalTo: "Password Not Match" } } } } angular.module("AssemblyApp").controller("userController", n).controller("ForgotPasswordController", t).controller("ResetPasswordController", i); n.$inject = ["$scope", "AssemblyAPIServices"]; t.$inject = ["$scope", "AssemblyAPIServices"]; i.$inject = ["$scope", "AssemblyAPIServices"]
})()
